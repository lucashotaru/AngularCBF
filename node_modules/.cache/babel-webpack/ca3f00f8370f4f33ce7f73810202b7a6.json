{"ast":null,"code":"import _asyncToGenerator from \"/home/lucas/Projetos/anulario/AngularCBF/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst AUTH_API = 'https://localhost:7126/';\nexport class DataService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n\n  responseToUrl(data) {\n    let blob = new Blob([data]);\n    return window.URL.createObjectURL(blob);\n  }\n\n  download(api, query) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const params = new HttpParams({\n        fromObject: query\n      });\n      const response = yield _this.httpClient.get(api, {\n        params: params,\n        responseType: 'arraybuffer'\n      }).toPromise();\n      return _this.responseToUrl(response);\n    })();\n  }\n\n  get(api, query, download) {\n    const params = new HttpParams({\n      fromObject: query\n    });\n    let response;\n\n    if (download) {\n      response = this.httpClient.get(api, {\n        params: params,\n        responseType: 'blob'\n      }).toPromise();\n    } else {\n      response = this.httpClient.get(api, {\n        params: params\n      }).toPromise();\n    }\n\n    console.log(AUTH_API + api);\n    return response;\n  }\n\n  post(api, params, download, options) {\n    let response;\n\n    if (download) {\n      response = this.httpClient.post(api, params, {\n        responseType: 'blob'\n      }).toPromise();\n    } else {\n      response = options ? this.httpClient.post(api, params, options).toPromise() : this.httpClient.post(api, params).toPromise();\n    }\n\n    return response;\n  }\n\n  put(api, params, download, options) {\n    let response;\n\n    if (download) {\n      response = this.httpClient.put(api, params, {\n        responseType: 'blob'\n      }).toPromise();\n    } else {\n      response = this.httpClient.put(api, params, options).toPromise();\n    }\n\n    return response;\n  }\n\n  delete(api) {\n    return this.httpClient.delete(api).toPromise();\n  }\n\n}\n\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac\n});","map":{"version":3,"sources":["/home/lucas/Projetos/anulario/AngularCBF/src/app/Services/data.service.ts"],"names":["HttpParams","i0","i1","AUTH_API","DataService","constructor","httpClient","responseToUrl","data","blob","Blob","window","URL","createObjectURL","download","api","query","params","fromObject","response","get","responseType","toPromise","console","log","post","options","put","delete","ɵfac","DataService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":"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","sourcesContent":["import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst AUTH_API = 'https://localhost:7126/';\nexport class DataService {\n    constructor(httpClient) {\n        this.httpClient = httpClient;\n    }\n    responseToUrl(data) {\n        let blob = new Blob([data]);\n        return window.URL.createObjectURL(blob);\n    }\n    async download(api, query) {\n        const params = new HttpParams({ fromObject: query });\n        const response = await this.httpClient\n            .get(api, { params: params, responseType: 'arraybuffer' })\n            .toPromise();\n        return this.responseToUrl(response);\n    }\n    get(api, query, download) {\n        const params = new HttpParams({ fromObject: query });\n        let response;\n        if (download) {\n            response = this.httpClient\n                .get(api, { params: params, responseType: 'blob' })\n                .toPromise();\n        }\n        else {\n            response = this.httpClient.get(api, { params: params }).toPromise();\n        }\n        console.log(AUTH_API + api);\n        return response;\n    }\n    post(api, params, download, options) {\n        let response;\n        if (download) {\n            response = this.httpClient\n                .post(api, params, { responseType: 'blob' })\n                .toPromise();\n        }\n        else {\n            response = options\n                ? this.httpClient.post(api, params, options).toPromise()\n                : this.httpClient.post(api, params).toPromise();\n        }\n        return response;\n    }\n    put(api, params, download, options) {\n        let response;\n        if (download) {\n            response = this.httpClient\n                .put(api, params, { responseType: 'blob' })\n                .toPromise();\n        }\n        else {\n            response = this.httpClient.put(api, params, options).toPromise();\n        }\n        return response;\n    }\n    delete(api) {\n        return this.httpClient.delete(api).toPromise();\n    }\n}\nDataService.ɵfac = function DataService_Factory(t) { return new (t || DataService)(i0.ɵɵinject(i1.HttpClient)); };\nDataService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DataService, factory: DataService.ɵfac });\n"]},"metadata":{},"sourceType":"module"}