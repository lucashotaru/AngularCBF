{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Alunos/2/AngularCBF/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpParams } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n    }\n\n    responseToUrl(data) {\n      let blob = new Blob([data]);\n      return window.URL.createObjectURL(blob);\n    }\n\n    download(api, query) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const params = new HttpParams({\n          fromObject: query\n        });\n        const response = yield _this.httpClient.get(api, {\n          params: params,\n          responseType: 'arraybuffer'\n        }).toPromise();\n        return _this.responseToUrl(response);\n      })();\n    }\n\n    get(api, query, download) {\n      const params = new HttpParams({\n        fromObject: query\n      });\n      let response;\n\n      if (download) {\n        response = this.httpClient.get(api, {\n          params: params,\n          responseType: 'blob'\n        }).toPromise();\n      } else {\n        response = this.httpClient.get(api, {\n          params: params\n        }).toPromise();\n      }\n\n      return response;\n    }\n\n    post(api, params, download, options) {\n      let response;\n\n      if (download) {\n        response = this.httpClient.post(api, params, {\n          responseType: 'blob'\n        }).toPromise();\n      } else {\n        response = options ? this.httpClient.post(api, params, options).toPromise() : this.httpClient.post(api, params).toPromise();\n      }\n\n      return response;\n    }\n\n    put(api, params, download, options) {\n      let response;\n\n      if (download) {\n        response = this.httpClient.put(api, params, {\n          responseType: 'blob'\n        }).toPromise();\n      } else {\n        response = this.httpClient.put(api, params, options).toPromise();\n      }\n\n      return response;\n    }\n\n    delete(api) {\n      return this.httpClient.delete(api).toPromise();\n    }\n\n  }\n\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module"}