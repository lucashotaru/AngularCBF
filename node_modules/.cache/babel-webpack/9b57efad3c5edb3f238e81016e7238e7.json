{"ast":null,"code":"import _asyncToGenerator from \"C:/bitbucket/Nova pasta/AngularCBF/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpParams } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n\n  responseToUrl(data) {\n    let blob = new Blob([data]);\n    return window.URL.createObjectURL(blob);\n  }\n\n  download(api, query) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const params = new HttpParams({\n        fromObject: query\n      });\n      const response = yield _this.httpClient.get(api, {\n        params: params,\n        responseType: 'arraybuffer'\n      }).toPromise();\n      return _this.responseToUrl(response);\n    })();\n  }\n\n  get(api, query, download) {\n    const params = new HttpParams({\n      fromObject: query\n    });\n    let response;\n\n    if (download) {\n      response = this.httpClient.get(api, {\n        params: params,\n        responseType: 'blob'\n      }).toPromise();\n    } else {\n      response = this.httpClient.get(api, {\n        params: params\n      }).toPromise();\n    }\n\n    return response;\n  }\n\n  post(api, params, download, options) {\n    let response;\n\n    if (download) {\n      response = this.httpClient.post(api, params, {\n        responseType: 'blob'\n      }).toPromise();\n    } else {\n      response = options ? this.httpClient.post(api, params, options).toPromise() : this.httpClient.post(api, params).toPromise();\n    }\n\n    return response;\n  }\n\n  put(api, params, download, options) {\n    let response;\n\n    if (download) {\n      response = this.httpClient.put(api, params, {\n        responseType: 'blob'\n      }).toPromise();\n    } else {\n      response = this.httpClient.put(api, params, options).toPromise();\n    }\n\n    return response;\n  }\n\n  delete(api) {\n    return this.httpClient.delete(api).toPromise();\n  }\n\n}\n\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac\n});","map":{"version":3,"sources":["C:/bitbucket/Nova pasta/AngularCBF/src/app/Services/data.service.ts"],"names":["HttpParams","i0","i1","DataService","constructor","httpClient","responseToUrl","data","blob","Blob","window","URL","createObjectURL","download","api","query","params","fromObject","response","get","responseType","toPromise","post","options","put","delete","ɵfac","DataService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":"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","sourcesContent":["import { HttpParams } from \"@angular/common/http\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class DataService {\r\n    constructor(httpClient) {\r\n        this.httpClient = httpClient;\r\n    }\r\n    responseToUrl(data) {\r\n        let blob = new Blob([data]);\r\n        return window.URL.createObjectURL(blob);\r\n    }\r\n    async download(api, query) {\r\n        const params = new HttpParams({ fromObject: query });\r\n        const response = await this.httpClient.get(api, { params: params, responseType: 'arraybuffer' })\r\n            .toPromise();\r\n        return this.responseToUrl(response);\r\n    }\r\n    get(api, query, download) {\r\n        const params = new HttpParams({ fromObject: query });\r\n        let response;\r\n        if (download) {\r\n            response = this.httpClient.get(api, { params: params, responseType: 'blob' })\r\n                .toPromise();\r\n        }\r\n        else {\r\n            response = this.httpClient.get(api, { params: params })\r\n                .toPromise();\r\n        }\r\n        return response;\r\n    }\r\n    post(api, params, download, options) {\r\n        let response;\r\n        if (download) {\r\n            response = this.httpClient.post(api, params, { responseType: 'blob' })\r\n                .toPromise();\r\n        }\r\n        else {\r\n            response = (options) ? this.httpClient.post(api, params, options).toPromise()\r\n                : this.httpClient.post(api, params).toPromise();\r\n        }\r\n        return response;\r\n    }\r\n    put(api, params, download, options) {\r\n        let response;\r\n        if (download) {\r\n            response = this.httpClient.put(api, params, { responseType: 'blob' })\r\n                .toPromise();\r\n        }\r\n        else {\r\n            response = this.httpClient.put(api, params, options)\r\n                .toPromise();\r\n        }\r\n        return response;\r\n    }\r\n    delete(api) {\r\n        return this.httpClient.delete(api)\r\n            .toPromise();\r\n    }\r\n}\r\nDataService.ɵfac = function DataService_Factory(t) { return new (t || DataService)(i0.ɵɵinject(i1.HttpClient)); };\r\nDataService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DataService, factory: DataService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}