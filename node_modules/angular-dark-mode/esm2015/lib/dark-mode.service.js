import { Inject, Injectable, Optional, RendererFactory2, } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import { DARK_MODE_OPTIONS } from './dark-mode-options';
import { defaultOptions } from './default-options';
import { isNil } from './isNil';
import { MediaQueryService } from './media-query.service';
import * as i0 from "@angular/core";
import * as i1 from "./media-query.service";
import * as i2 from "./dark-mode-options";
export class DarkModeService {
    constructor(rendererFactory, mediaQueryService, 
    // prettier-ignore
    providedOptions) {
        this.rendererFactory = rendererFactory;
        this.mediaQueryService = mediaQueryService;
        this.providedOptions = providedOptions;
        this.options = Object.assign(Object.assign({}, defaultOptions), (this.providedOptions || {}));
        this.renderer = this.rendererFactory.createRenderer(null, null);
        this.darkModeSubject$ = new BehaviorSubject(this.getInitialDarkModeValue());
        this.darkModeSubject$.getValue() ? this.enable() : this.disable();
        this.removePreloadingClass();
    }
    /**
     * An Observable representing current dark mode.
     * Only fires the initial and distinct values.
     */
    get darkMode$() {
        return this.darkModeSubject$.asObservable().pipe(distinctUntilChanged());
    }
    toggle() {
        this.darkModeSubject$.getValue() ? this.disable() : this.enable();
    }
    enable() {
        const { element, darkModeClass, lightModeClass } = this.options;
        this.renderer.removeClass(element, lightModeClass);
        this.renderer.addClass(element, darkModeClass);
        this.saveDarkModeToStorage(true);
        this.darkModeSubject$.next(true);
    }
    disable() {
        const { element, darkModeClass, lightModeClass } = this.options;
        this.renderer.removeClass(element, darkModeClass);
        this.renderer.addClass(element, lightModeClass);
        this.saveDarkModeToStorage(false);
        this.darkModeSubject$.next(false);
    }
    getInitialDarkModeValue() {
        const darkModeFromStorage = this.getDarkModeFromStorage();
        if (isNil(darkModeFromStorage)) {
            return this.mediaQueryService.prefersDarkMode();
        }
        return darkModeFromStorage;
    }
    saveDarkModeToStorage(darkMode) {
        localStorage.setItem(this.options.storageKey, JSON.stringify({ darkMode }));
    }
    getDarkModeFromStorage() {
        var _a;
        const storageItem = localStorage.getItem(this.options.storageKey);
        if (storageItem) {
            try {
                return (_a = JSON.parse(storageItem)) === null || _a === void 0 ? void 0 : _a.darkMode;
            }
            catch (error) {
                console.error('Invalid darkMode localStorage item:', storageItem, 'falling back to color scheme media query');
            }
        }
        return null;
    }
    removePreloadingClass() {
        // defer to next tick
        setTimeout(() => {
            this.renderer.removeClass(this.options.element, this.options.preloadingClass);
        });
    }
}
DarkModeService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DarkModeService_Factory() { return new DarkModeService(i0.ɵɵinject(i0.RendererFactory2), i0.ɵɵinject(i1.MediaQueryService), i0.ɵɵinject(i2.DARK_MODE_OPTIONS, 8)); }, token: DarkModeService, providedIn: "root" });
DarkModeService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
DarkModeService.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: MediaQueryService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DARK_MODE_OPTIONS,] }] }
];
//# sourceMappingURL=data:application/json;base64,