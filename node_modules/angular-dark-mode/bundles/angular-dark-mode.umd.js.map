{"version":3,"file":"angular-dark-mode.umd.js","sources":["../../../projects/angular-dark-mode/src/lib/dark-mode-options.ts","../../../projects/angular-dark-mode/src/lib/default-options.ts","../../../projects/angular-dark-mode/src/lib/isNil.ts","../../../projects/angular-dark-mode/src/lib/media-query.ts","../../../projects/angular-dark-mode/src/lib/media-query.service.ts","../../../projects/angular-dark-mode/src/lib/dark-mode.service.ts","../../../projects/angular-dark-mode/src/public-api.ts","../../../projects/angular-dark-mode/src/angular-dark-mode.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { DarkModeOptions } from './types';\n\n/**\n * InjectionToken to override default options\n *\n * @example\n *\n * providers: [\n *   {\n *     provide: DARK_MODE_OPTIONS,\n *     useValue: {\n *       darkModeClass: 'my-dark-mode',\n *       lightModeClass: 'my-light-mode',\n *     },\n *   },\n * ]\n */\nexport const DARK_MODE_OPTIONS = new InjectionToken<Partial<DarkModeOptions>>(\n  'DARK_MODE_OPTIONS'\n);\n","import { DarkModeOptions } from './types';\n\n/**\n * Default options used in DarkModeService\n */\nexport const defaultOptions: DarkModeOptions = {\n  darkModeClass: 'dark-mode',\n  lightModeClass: 'light-mode',\n  preloadingClass: 'dark-mode-preloading',\n  storageKey: 'dark-mode',\n  element: document.body,\n};\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any */\nexport function isNil(value: any): value is null | undefined {\n  return value === null || value === undefined;\n}\n","export const prefersDarkSchemeQuery = '(prefers-color-scheme: dark)';\n","import { Injectable } from '@angular/core';\nimport { prefersDarkSchemeQuery } from './media-query';\n\n@Injectable({ providedIn: 'root' })\nexport class MediaQueryService {\n  matchMedia(query: string): MediaQueryList {\n    return window.matchMedia(query);\n  }\n\n  prefersDarkMode(): boolean {\n    return this.matchMedia(prefersDarkSchemeQuery).matches;\n  }\n}\n","import {\n  Inject,\n  Injectable,\n  Optional,\n  Renderer2,\n  RendererFactory2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { DARK_MODE_OPTIONS } from './dark-mode-options';\nimport { defaultOptions } from './default-options';\nimport { isNil } from './isNil';\nimport { MediaQueryService } from './media-query.service';\nimport { DarkModeOptions } from './types';\n\n@Injectable({ providedIn: 'root' })\nexport class DarkModeService {\n  private readonly options: DarkModeOptions;\n  private readonly renderer: Renderer2;\n  private readonly darkModeSubject$: BehaviorSubject<boolean>;\n\n  constructor(\n    private rendererFactory: RendererFactory2,\n    private mediaQueryService: MediaQueryService,\n    // prettier-ignore\n    @Optional() @Inject(DARK_MODE_OPTIONS) private providedOptions: DarkModeOptions | null\n  ) {\n    this.options = { ...defaultOptions, ...(this.providedOptions || {}) };\n    this.renderer = this.rendererFactory.createRenderer(null, null);\n    this.darkModeSubject$ = new BehaviorSubject(this.getInitialDarkModeValue());\n    this.darkModeSubject$.getValue() ? this.enable() : this.disable();\n    this.removePreloadingClass();\n  }\n\n  /**\n   * An Observable representing current dark mode.\n   * Only fires the initial and distinct values.\n   */\n  get darkMode$(): Observable<boolean> {\n    return this.darkModeSubject$.asObservable().pipe(distinctUntilChanged());\n  }\n\n  toggle(): void {\n    this.darkModeSubject$.getValue() ? this.disable() : this.enable();\n  }\n\n  enable(): void {\n    const { element, darkModeClass, lightModeClass } = this.options;\n    this.renderer.removeClass(element, lightModeClass);\n    this.renderer.addClass(element, darkModeClass);\n    this.saveDarkModeToStorage(true);\n    this.darkModeSubject$.next(true);\n  }\n\n  disable(): void {\n    const { element, darkModeClass, lightModeClass } = this.options;\n    this.renderer.removeClass(element, darkModeClass);\n    this.renderer.addClass(element, lightModeClass);\n    this.saveDarkModeToStorage(false);\n    this.darkModeSubject$.next(false);\n  }\n\n  private getInitialDarkModeValue(): boolean {\n    const darkModeFromStorage = this.getDarkModeFromStorage();\n\n    if (isNil(darkModeFromStorage)) {\n      return this.mediaQueryService.prefersDarkMode();\n    }\n\n    return darkModeFromStorage;\n  }\n\n  private saveDarkModeToStorage(darkMode: boolean): void {\n    localStorage.setItem(this.options.storageKey, JSON.stringify({ darkMode }));\n  }\n\n  private getDarkModeFromStorage(): boolean | null {\n    const storageItem = localStorage.getItem(this.options.storageKey);\n\n    if (storageItem) {\n      try {\n        return JSON.parse(storageItem)?.darkMode;\n      } catch (error) {\n        console.error(\n          'Invalid darkMode localStorage item:',\n          storageItem,\n          'falling back to color scheme media query'\n        );\n      }\n    }\n\n    return null;\n  }\n\n  private removePreloadingClass(): void {\n    // defer to next tick\n    setTimeout(() => {\n      this.renderer.removeClass(\n        this.options.element,\n        this.options.preloadingClass\n      );\n    });\n  }\n}\n","/*\n * Public API Surface of angular-dark-mode\n */\n\nexport * from './lib/dark-mode-options';\nexport * from './lib/dark-mode.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {MediaQueryService as ɵa} from './lib/media-query.service';\nexport {DarkModeOptions as ɵb} from './lib/types';"],"names":["InjectionToken","Injectable","BehaviorSubject","distinctUntilChanged","RendererFactory2","Optional","Inject"],"mappings":"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"}