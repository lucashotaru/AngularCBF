(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('angular-dark-mode', ['exports', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['angular-dark-mode'] = {}, global.ng.core, global.rxjs, global.rxjs.operators));
}(this, (function (exports, i0, rxjs, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    /**
     * InjectionToken to override default options
     *
     * @example
     *
     * providers: [
     *   {
     *     provide: DARK_MODE_OPTIONS,
     *     useValue: {
     *       darkModeClass: 'my-dark-mode',
     *       lightModeClass: 'my-light-mode',
     *     },
     *   },
     * ]
     */
    var DARK_MODE_OPTIONS = new i0.InjectionToken('DARK_MODE_OPTIONS');

    /**
     * Default options used in DarkModeService
     */
    var defaultOptions = {
        darkModeClass: 'dark-mode',
        lightModeClass: 'light-mode',
        preloadingClass: 'dark-mode-preloading',
        storageKey: 'dark-mode',
        element: document.body,
    };

    /* eslint-disable @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any */
    function isNil(value) {
        return value === null || value === undefined;
    }

    var prefersDarkSchemeQuery = '(prefers-color-scheme: dark)';

    var MediaQueryService = /** @class */ (function () {
        function MediaQueryService() {
        }
        MediaQueryService.prototype.matchMedia = function (query) {
            return window.matchMedia(query);
        };
        MediaQueryService.prototype.prefersDarkMode = function () {
            return this.matchMedia(prefersDarkSchemeQuery).matches;
        };
        return MediaQueryService;
    }());
    MediaQueryService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function MediaQueryService_Factory() { return new MediaQueryService(); }, token: MediaQueryService, providedIn: "root" });
    MediaQueryService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];

    var DarkModeService = /** @class */ (function () {
        function DarkModeService(rendererFactory, mediaQueryService, 
        // prettier-ignore
        providedOptions) {
            this.rendererFactory = rendererFactory;
            this.mediaQueryService = mediaQueryService;
            this.providedOptions = providedOptions;
            this.options = Object.assign(Object.assign({}, defaultOptions), (this.providedOptions || {}));
            this.renderer = this.rendererFactory.createRenderer(null, null);
            this.darkModeSubject$ = new rxjs.BehaviorSubject(this.getInitialDarkModeValue());
            this.darkModeSubject$.getValue() ? this.enable() : this.disable();
            this.removePreloadingClass();
        }
        Object.defineProperty(DarkModeService.prototype, "darkMode$", {
            /**
             * An Observable representing current dark mode.
             * Only fires the initial and distinct values.
             */
            get: function () {
                return this.darkModeSubject$.asObservable().pipe(operators.distinctUntilChanged());
            },
            enumerable: false,
            configurable: true
        });
        DarkModeService.prototype.toggle = function () {
            this.darkModeSubject$.getValue() ? this.disable() : this.enable();
        };
        DarkModeService.prototype.enable = function () {
            var _b = this.options, element = _b.element, darkModeClass = _b.darkModeClass, lightModeClass = _b.lightModeClass;
            this.renderer.removeClass(element, lightModeClass);
            this.renderer.addClass(element, darkModeClass);
            this.saveDarkModeToStorage(true);
            this.darkModeSubject$.next(true);
        };
        DarkModeService.prototype.disable = function () {
            var _b = this.options, element = _b.element, darkModeClass = _b.darkModeClass, lightModeClass = _b.lightModeClass;
            this.renderer.removeClass(element, darkModeClass);
            this.renderer.addClass(element, lightModeClass);
            this.saveDarkModeToStorage(false);
            this.darkModeSubject$.next(false);
        };
        DarkModeService.prototype.getInitialDarkModeValue = function () {
            var darkModeFromStorage = this.getDarkModeFromStorage();
            if (isNil(darkModeFromStorage)) {
                return this.mediaQueryService.prefersDarkMode();
            }
            return darkModeFromStorage;
        };
        DarkModeService.prototype.saveDarkModeToStorage = function (darkMode) {
            localStorage.setItem(this.options.storageKey, JSON.stringify({ darkMode: darkMode }));
        };
        DarkModeService.prototype.getDarkModeFromStorage = function () {
            var _a;
            var storageItem = localStorage.getItem(this.options.storageKey);
            if (storageItem) {
                try {
                    return (_a = JSON.parse(storageItem)) === null || _a === void 0 ? void 0 : _a.darkMode;
                }
                catch (error) {
                    console.error('Invalid darkMode localStorage item:', storageItem, 'falling back to color scheme media query');
                }
            }
            return null;
        };
        DarkModeService.prototype.removePreloadingClass = function () {
            var _this = this;
            // defer to next tick
            setTimeout(function () {
                _this.renderer.removeClass(_this.options.element, _this.options.preloadingClass);
            });
        };
        return DarkModeService;
    }());
    DarkModeService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function DarkModeService_Factory() { return new DarkModeService(i0__namespace.ɵɵinject(i0__namespace.RendererFactory2), i0__namespace.ɵɵinject(MediaQueryService), i0__namespace.ɵɵinject(DARK_MODE_OPTIONS, 8)); }, token: DarkModeService, providedIn: "root" });
    DarkModeService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    DarkModeService.ctorParameters = function () { return [
        { type: i0.RendererFactory2 },
        { type: MediaQueryService },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [DARK_MODE_OPTIONS,] }] }
    ]; };

    /*
     * Public API Surface of angular-dark-mode
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DARK_MODE_OPTIONS = DARK_MODE_OPTIONS;
    exports.DarkModeService = DarkModeService;
    exports.ɵa = MediaQueryService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-dark-mode.umd.js.map
