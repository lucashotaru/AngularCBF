import { DOCUMENT } from '@angular/common';
import { Directive, Inject, } from '@angular/core';
import { merge, Subject } from 'rxjs';
import { distinctUntilChanged, map, takeUntil, filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/scrolling";
import * as i2 from "@angular/cdk/platform";
export class NgxNavbarDynamicExpandDirective {
    constructor(viewportRuler, elRef, ngZone, cdRef, platform, _document) {
        this.viewportRuler = viewportRuler;
        this.elRef = elRef;
        this.ngZone = ngZone;
        this.cdRef = cdRef;
        this.platform = platform;
        this._document = _document;
        this.onDestroy$ = new Subject();
        this.update$ = new Subject();
        this.loaded = false;
        this._isExpanded = false;
        this.ngZone.runOutsideAngular(() => {
            merge(this.viewportRuler.change(150), this.update$)
                .pipe(filter(() => this.loaded ||
                (this.loaded = checkBootstrapStylesAreLoaded(this._document, this.elRef.nativeElement))), map(() => {
                const element = this.elRef.nativeElement;
                let overflowSize;
                if (this.isExpanded) {
                    overflowSize = element.scrollWidth - element.offsetWidth;
                }
                else {
                    const clone = element.cloneNode(true);
                    clone.classList.add('navbar-expand');
                    const parent = element.parentElement;
                    if (parent) {
                        parent.appendChild(clone);
                        overflowSize = clone.scrollWidth - clone.offsetWidth;
                        parent.removeChild(clone);
                    }
                }
                return !overflowSize;
            }), distinctUntilChanged(), takeUntil(this.onDestroy$))
                .subscribe((isExpanded) => {
                this.ngZone.run(() => {
                    this._isExpanded = isExpanded;
                    this.cdRef.markForCheck();
                });
            });
        });
    }
    get isExpanded() {
        return this._isExpanded;
    }
    ngAfterContentInit() {
        if (!this.platform.isBrowser) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.loaded = checkBootstrapStylesAreLoaded(this._document, this.elRef.nativeElement);
            if (this.loaded) {
                this.update$.next();
            }
            else {
                setTimeout(() => {
                    this.ngAfterContentInit();
                }, 1000 / 60);
            }
        });
    }
    ngOnDestroy() {
        this.update$.complete();
        this.onDestroy$.next();
        this.onDestroy$.complete();
    }
}
NgxNavbarDynamicExpandDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NgxNavbarDynamicExpandDirective, deps: [{ token: i1.ViewportRuler }, { token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: i2.Platform }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });
NgxNavbarDynamicExpandDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.0", type: NgxNavbarDynamicExpandDirective, selector: "[ngxNavbarDynamicExpand]", host: { properties: { "class.navbar-expand": "isExpanded" }, classAttribute: "navbar text-nowrap" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NgxNavbarDynamicExpandDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngxNavbarDynamicExpand]',
                    host: {
                        class: 'navbar text-nowrap',
                        '[class.navbar-expand]': 'isExpanded',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i1.ViewportRuler }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i2.Platform }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
function checkBootstrapStylesAreLoaded(document, element) {
    const documentWindow = document.defaultView || window;
    const computedStyle = documentWindow && documentWindow.getComputedStyle
        ? documentWindow.getComputedStyle(element)
        : false;
    return computedStyle && computedStyle.whiteSpace === 'nowrap';
}
//# sourceMappingURL=data:application/json;base64,