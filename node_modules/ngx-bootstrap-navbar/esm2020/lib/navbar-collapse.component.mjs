import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';
import { ngxNavbarAnimations } from './navbar-animation';
import * as i0 from "@angular/core";
export class NgxNavbarCollapseComponent {
    constructor(cdRef) {
        this.cdRef = cdRef;
        this.isCollapsed = true;
        this.isTransitioning = false;
    }
    toggle() {
        this.isTransitioning = true;
        this.isCollapsed = !this.isCollapsed;
        this.cdRef.markForCheck();
    }
    close() {
        if (this.isCollapsed) {
            return;
        }
        this.isTransitioning = true;
        this.isCollapsed = true;
        this.cdRef.markForCheck();
    }
    open() {
        if (!this.isCollapsed) {
            return;
        }
        this.isTransitioning = true;
        this.isCollapsed = false;
        this.cdRef.markForCheck();
    }
}
NgxNavbarCollapseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NgxNavbarCollapseComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NgxNavbarCollapseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.0", type: NgxNavbarCollapseComponent, selector: "ngx-navbar-collapse", host: { listeners: { "@slideState.done": "isTransitioning = false" }, properties: { "class.collapse": "!isTransitioning", "class.show": "!isCollapsed && !isTransitioning", "class.collapsing": "isTransitioning", "@slideState": "!isCollapsed" }, classAttribute: "navbar-collapse ngx-navbar-collapse" }, exportAs: ["ngxNavbarCollapse"], ngImport: i0, template: `
    <ng-content></ng-content>
  `, isInline: true, styles: [".ngx-navbar-collapse.collapsing{height:auto}\n"], animations: [ngxNavbarAnimations.navbarSlide], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NgxNavbarCollapseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-navbar-collapse',
                    template: `
    <ng-content></ng-content>
  `,
                    styles: [
                        `
      .ngx-navbar-collapse.collapsing {
        height: auto;
      }
    `
                    ],
                    host: {
                        class: 'navbar-collapse ngx-navbar-collapse',
                        '[class.collapse]': '!isTransitioning',
                        '[class.show]': '!isCollapsed && !isTransitioning',
                        '[class.collapsing]': 'isTransitioning',
                        '[@slideState]': '!isCollapsed',
                        '(@slideState.done)': 'isTransitioning = false'
                    },
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [ngxNavbarAnimations.navbarSlide],
                    exportAs: 'ngxNavbarCollapse'
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2YmFyLWNvbGxhcHNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1ib290c3RyYXAtbmF2YmFyL3NyYy9saWIvbmF2YmFyLWNvbGxhcHNlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBRXZCLFNBQVMsRUFDVCxpQkFBaUIsRUFDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7O0FBMkJ6RCxNQUFNLE9BQU8sMEJBQTBCO0lBSXJDLFlBQTZCLEtBQXdCO1FBQXhCLFVBQUssR0FBTCxLQUFLLENBQW1CO1FBSDlDLGdCQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ25CLG9CQUFlLEdBQUcsS0FBSyxDQUFDO0lBRXlCLENBQUM7SUFFekQsTUFBTTtRQUNKLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQzVCLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDNUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JCLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQzVCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDNUIsQ0FBQzs7dUhBNUJVLDBCQUEwQjsyR0FBMUIsMEJBQTBCLHlZQXZCM0I7O0dBRVQsMEZBa0JXLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDOzJGQUdsQywwQkFBMEI7a0JBekJ0QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFFBQVEsRUFBRTs7R0FFVDtvQkFDRCxNQUFNLEVBQUU7d0JBQ047Ozs7S0FJQztxQkFDRjtvQkFDRCxJQUFJLEVBQUU7d0JBQ0osS0FBSyxFQUFFLHFDQUFxQzt3QkFDNUMsa0JBQWtCLEVBQUUsa0JBQWtCO3dCQUN0QyxjQUFjLEVBQUUsa0NBQWtDO3dCQUNsRCxvQkFBb0IsRUFBRSxpQkFBaUI7d0JBQ3ZDLGVBQWUsRUFBRSxjQUFjO3dCQUMvQixvQkFBb0IsRUFBRSx5QkFBeUI7cUJBQ2hEO29CQUNELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsVUFBVSxFQUFFLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDO29CQUM3QyxRQUFRLEVBQUUsbUJBQW1CO2lCQUM5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgQ29tcG9uZW50LFxyXG4gIFZpZXdFbmNhcHN1bGF0aW9uXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IG5neE5hdmJhckFuaW1hdGlvbnMgfSBmcm9tICcuL25hdmJhci1hbmltYXRpb24nO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICduZ3gtbmF2YmFyLWNvbGxhcHNlJyxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG4gIGAsXHJcbiAgc3R5bGVzOiBbXHJcbiAgICBgXHJcbiAgICAgIC5uZ3gtbmF2YmFyLWNvbGxhcHNlLmNvbGxhcHNpbmcge1xyXG4gICAgICAgIGhlaWdodDogYXV0bztcclxuICAgICAgfVxyXG4gICAgYFxyXG4gIF0sXHJcbiAgaG9zdDoge1xyXG4gICAgY2xhc3M6ICduYXZiYXItY29sbGFwc2Ugbmd4LW5hdmJhci1jb2xsYXBzZScsXHJcbiAgICAnW2NsYXNzLmNvbGxhcHNlXSc6ICchaXNUcmFuc2l0aW9uaW5nJyxcclxuICAgICdbY2xhc3Muc2hvd10nOiAnIWlzQ29sbGFwc2VkICYmICFpc1RyYW5zaXRpb25pbmcnLFxyXG4gICAgJ1tjbGFzcy5jb2xsYXBzaW5nXSc6ICdpc1RyYW5zaXRpb25pbmcnLFxyXG4gICAgJ1tAc2xpZGVTdGF0ZV0nOiAnIWlzQ29sbGFwc2VkJyxcclxuICAgICcoQHNsaWRlU3RhdGUuZG9uZSknOiAnaXNUcmFuc2l0aW9uaW5nID0gZmFsc2UnXHJcbiAgfSxcclxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIGFuaW1hdGlvbnM6IFtuZ3hOYXZiYXJBbmltYXRpb25zLm5hdmJhclNsaWRlXSxcclxuICBleHBvcnRBczogJ25neE5hdmJhckNvbGxhcHNlJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4TmF2YmFyQ29sbGFwc2VDb21wb25lbnQge1xyXG4gIHB1YmxpYyBpc0NvbGxhcHNlZCA9IHRydWU7XHJcbiAgcHVibGljIGlzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZikge31cclxuXHJcbiAgdG9nZ2xlKCkge1xyXG4gICAgdGhpcy5pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xyXG4gICAgdGhpcy5pc0NvbGxhcHNlZCA9ICF0aGlzLmlzQ29sbGFwc2VkO1xyXG4gICAgdGhpcy5jZFJlZi5tYXJrRm9yQ2hlY2soKTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgaWYgKHRoaXMuaXNDb2xsYXBzZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xyXG4gICAgdGhpcy5pc0NvbGxhcHNlZCA9IHRydWU7XHJcbiAgICB0aGlzLmNkUmVmLm1hcmtGb3JDaGVjaygpO1xyXG4gIH1cclxuXHJcbiAgb3BlbigpIHtcclxuICAgIGlmICghdGhpcy5pc0NvbGxhcHNlZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLmlzVHJhbnNpdGlvbmluZyA9IHRydWU7XHJcbiAgICB0aGlzLmlzQ29sbGFwc2VkID0gZmFsc2U7XHJcbiAgICB0aGlzLmNkUmVmLm1hcmtGb3JDaGVjaygpO1xyXG4gIH1cclxufVxyXG4iXX0=