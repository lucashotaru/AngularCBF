import { DOCUMENT, CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Directive, Inject, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { Subject, merge } from 'rxjs';
import { filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';
import * as i1 from '@angular/cdk/scrolling';
import * as i2 from '@angular/cdk/platform';
import { trigger, transition, style, animate } from '@angular/animations';

class NgxNavbarDynamicExpandDirective {
    constructor(viewportRuler, elRef, ngZone, cdRef, platform, _document) {
        this.viewportRuler = viewportRuler;
        this.elRef = elRef;
        this.ngZone = ngZone;
        this.cdRef = cdRef;
        this.platform = platform;
        this._document = _document;
        this.onDestroy$ = new Subject();
        this.update$ = new Subject();
        this.loaded = false;
        this._isExpanded = false;
        this.ngZone.runOutsideAngular(() => {
            merge(this.viewportRuler.change(150), this.update$)
                .pipe(filter(() => this.loaded ||
                (this.loaded = checkBootstrapStylesAreLoaded(this._document, this.elRef.nativeElement))), map(() => {
                const element = this.elRef.nativeElement;
                let overflowSize;
                if (this.isExpanded) {
                    overflowSize = element.scrollWidth - element.offsetWidth;
                }
                else {
                    const clone = element.cloneNode(true);
                    clone.classList.add('navbar-expand');
                    const parent = element.parentElement;
                    if (parent) {
                        parent.appendChild(clone);
                        overflowSize = clone.scrollWidth - clone.offsetWidth;
                        parent.removeChild(clone);
                    }
                }
                return !overflowSize;
            }), distinctUntilChanged(), takeUntil(this.onDestroy$))
                .subscribe((isExpanded) => {
                this.ngZone.run(() => {
                    this._isExpanded = isExpanded;
                    this.cdRef.markForCheck();
                });
            });
        });
    }
    get isExpanded() {
        return this._isExpanded;
    }
    ngAfterContentInit() {
        if (!this.platform.isBrowser) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.loaded = checkBootstrapStylesAreLoaded(this._document, this.elRef.nativeElement);
            if (this.loaded) {
                this.update$.next();
            }
            else {
                setTimeout(() => {
                    this.ngAfterContentInit();
                }, 1000 / 60);
            }
        });
    }
    ngOnDestroy() {
        this.update$.complete();
        this.onDestroy$.next();
        this.onDestroy$.complete();
    }
}
NgxNavbarDynamicExpandDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NgxNavbarDynamicExpandDirective, deps: [{ token: i1.ViewportRuler }, { token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: i2.Platform }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });
NgxNavbarDynamicExpandDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.0", type: NgxNavbarDynamicExpandDirective, selector: "[ngxNavbarDynamicExpand]", host: { properties: { "class.navbar-expand": "isExpanded" }, classAttribute: "navbar text-nowrap" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NgxNavbarDynamicExpandDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngxNavbarDynamicExpand]',
                    host: {
                        class: 'navbar text-nowrap',
                        '[class.navbar-expand]': 'isExpanded',
                    },
                }]
        }], ctorParameters: function () {
        return [{ type: i1.ViewportRuler }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i2.Platform }, { type: Document, decorators: [{
                        type: Inject,
                        args: [DOCUMENT]
                    }] }];
    } });
function checkBootstrapStylesAreLoaded(document, element) {
    const documentWindow = document.defaultView || window;
    const computedStyle = documentWindow && documentWindow.getComputedStyle
        ? documentWindow.getComputedStyle(element)
        : false;
    return computedStyle && computedStyle.whiteSpace === 'nowrap';
}

/** Time and timing curve for navbar animations. */
const NAVBAR_ANIMATION_TIMING = '300ms ease-out';
const ngxNavbarAnimations = {
    navbarSlide: trigger('slideState', [
        transition('false => true', [
            style({
                opacity: 0,
                height: 0,
                overflow: 'hidden'
            }),
            animate(NAVBAR_ANIMATION_TIMING, style({
                opacity: 1,
                height: '*'
            }))
        ]),
        transition('true => false', [
            animate(NAVBAR_ANIMATION_TIMING, style({
                display: 'block',
                opacity: 0,
                height: 0,
                overflow: 'hidden'
            }))
        ])
    ])
};

class NgxNavbarCollapseComponent {
    constructor(cdRef) {
        this.cdRef = cdRef;
        this.isCollapsed = true;
        this.isTransitioning = false;
    }
    toggle() {
        this.isTransitioning = true;
        this.isCollapsed = !this.isCollapsed;
        this.cdRef.markForCheck();
    }
    close() {
        if (this.isCollapsed) {
            return;
        }
        this.isTransitioning = true;
        this.isCollapsed = true;
        this.cdRef.markForCheck();
    }
    open() {
        if (!this.isCollapsed) {
            return;
        }
        this.isTransitioning = true;
        this.isCollapsed = false;
        this.cdRef.markForCheck();
    }
}
NgxNavbarCollapseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NgxNavbarCollapseComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NgxNavbarCollapseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.0", type: NgxNavbarCollapseComponent, selector: "ngx-navbar-collapse", host: { listeners: { "@slideState.done": "isTransitioning = false" }, properties: { "class.collapse": "!isTransitioning", "class.show": "!isCollapsed && !isTransitioning", "class.collapsing": "isTransitioning", "@slideState": "!isCollapsed" }, classAttribute: "navbar-collapse ngx-navbar-collapse" }, exportAs: ["ngxNavbarCollapse"], ngImport: i0, template: `
    <ng-content></ng-content>
  `, isInline: true, styles: [".ngx-navbar-collapse.collapsing{height:auto}\n"], animations: [ngxNavbarAnimations.navbarSlide], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NgxNavbarCollapseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-navbar-collapse',
                    template: `
    <ng-content></ng-content>
  `,
                    styles: [
                        `
      .ngx-navbar-collapse.collapsing {
        height: auto;
      }
    `
                    ],
                    host: {
                        class: 'navbar-collapse ngx-navbar-collapse',
                        '[class.collapse]': '!isTransitioning',
                        '[class.show]': '!isCollapsed && !isTransitioning',
                        '[class.collapsing]': 'isTransitioning',
                        '[@slideState]': '!isCollapsed',
                        '(@slideState.done)': 'isTransitioning = false'
                    },
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [ngxNavbarAnimations.navbarSlide],
                    exportAs: 'ngxNavbarCollapse'
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; } });

class NgxNavbarModule {
}
NgxNavbarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NgxNavbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgxNavbarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NgxNavbarModule, declarations: [NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective], imports: [CommonModule], exports: [NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective] });
NgxNavbarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NgxNavbarModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NgxNavbarModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective],
                    imports: [CommonModule],
                    exports: [NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective]
                }]
        }] });

/*
 * Public API Surface of ngx-bootstrap-navbar
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NAVBAR_ANIMATION_TIMING, NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective, NgxNavbarModule, ngxNavbarAnimations };
